"""
logic/tool.py

Functions for interacting with ToolShare Tool objects.

Copyright 2014 Stark.
"""

from ToolShare import models


def get_tools_by_owning_profile(profile):
    """
    Gets the tools a profile owns.

    Args:
        profile: Profile of tool owner.

    Returns:
        List of tool instances owned by the profile.
    """
    return models.Tool.objects.filter(owner=profile).all()


def get_tools_borrowed_by_profile(profile):
    """
    Gets the tools being borrowed (or requested) by a profile.

    Args:
        profile: Profile of tool borrower/requester.

    Returns:
        List of tools being borrowed/requested/reserved by the profile.
    """
    borrowings = models.Borrowing.objects.filter(borrower=profile).all()

    def tool_for_borrowing(borrowing):
        return borrowing.tool
    
    return map(tool_for_borrowing, borrowings)


def get_tools_for_shed(shed):
    """
    Gets the tools listed under a shed (virtually, not just physically).

    Args:
        shed: Shed tools belong to.

    Returns:
        List of tools added to the shed.
    """
    return models.Tool.objects.filter(shed=shed).all()


def create_tool(owner, shed, name, year=None, description=None, location=None):
    """
    Creates a new tool instance.

    Args:
        owner: Profile that owns the tool.
        shed: Shed the tool belongs to, even if it's not physically in it.
        name: Name of the tool.
        year: Year of the tool (optional).
        description: Longer description of the tool, condition, etc (optional).
        location: Location instance for the tool's current location. Should be
                  either the shed's location, the owner's home location, or
                  None if the tool is currently "in-transit".

    Returns:
        New tool instance.
    """
    raise NotImplementedError() # TODO(Lexie)


# TODO(Lexie): Add other logic functions needed for tool-management use cases.


"""
logic/tool.py

Functions for interacting with ToolShare Tool objects.

Copyright 2014 Stark.
"""

from ToolShare import models

from ToolShare.logic import shed as shed_logic

#############################SEARCHING FUNCTIONS########################

def get_tools_by_owning_profile(profile):
    """
    Gets the tools a profile owns.

    Args:
        profile: Profile of tool owner.

    Returns:
        List of tool instances owned by the profile.
    """
    return models.Tool.objects.filter(owner=profile).all()


def get_tools_borrowed_by_profile(profile):
    """
    Gets the tools being borrowed (or requested) by a profile.

    Args:
        profile: Profile of tool borrower/requester.

    Returns:
        List of tools being borrowed/requested/reserved by the profile.
    """
    borrowings = models.Borrowing.objects.filter(borrower=profile).all()

    def tool_for_borrowing(borrowing):
        return borrowing.tool
    
    return map(tool_for_borrowing, borrowings)


def get_tools_for_shed(shed):
    """
    Gets the tools listed under a shed (virtually, not just physically).

    Args:
        shed: Shed tools belong to.

    Returns:
        List of tools added to the shed.
    """
    return models.Tool.objects.filter(shed=shed).all()

def get_tool_by_field(field, shed):
    """
    Gets the tools listed under a shed correspong to a search name entered

    Args:
        shed: Shed tools belong to.
        field: user entered field (ex: hammer)

    Returns:
        List of tools containg the phrase in their name
    """
    
    return (models.Tool.objects.filter (name_contains = field) and\
           models.Tool.objects.filter(shed=shed).all())

##########################CREATES TOOL OJECT###############################
def create_tool(owner, shed, name, year=None, description=None, location=None):
    """
    Creates a new tool instance.

    Args:
        owner: Profile that owns the tool.
        shed: Shed the tool belongs to, even if it's not physically in it.
        name: Name of the tool.
        year: Year of the tool (optional).
        description: Longer description of the tool, condition, etc (optional).
        location: Location instance for the tool's current location. Should be
                  either the shed's location, the owner's home location, or
                  None if the tool is currently "in-transit".

    Returns:
        New tool instance.
    """
    t = models.Tool()
    t.owner = owner
    t.shed = shed
    t.name = name
    t.year = year
    t.description = description or ''
    t.location = location
    t.save()
    
    return t


###############################LOCATION FUNCTIONS############################
def is_at_owners(tool):
    """
    Returns boolean of if the tool is at owners house

    Args:
        tool: tool object being examined

    Returns:
        Boolean
    """
    if(tool.owner.location_home == tool.location):
        return True
    return False

def is_in_shed(tool, shed):
    """
    Returns boolean of if the tool is at shed

    Args:
        tool: tool object being examined
        shed: the shed that the tool may, or may not, be at

    Returns:
        Boolean
    """
    if(tool.location == shed.location):
        return True
    return False
    
def is_available(tool):
    """
    Returns boolean of if the tool is available

    Args:
        tool: tool object being examined

    Returns:
        Boolean
    """
    if(hasattr(tool, 'borrowing')):
        return True
    return False


def change_location(tool, new_location): #function to change location
    """
    Changes tools location to reflect it's current status

    Args:
        tool: the tool being examined
        new_location: the new location or status of the tool

        Returns:
        
    """
    if(new_location == None):
        tool.location = None
    else:
        tool.location = new_location

    # TODO(Lexie) if tool's borrowing's state is STATE_RESERVED, and if
    #             new_locatin == borrowing.pickup_location, mark it as ready.
    tool.save(update_fields = ['location'])

def profile_can_edit_tool(profile, tool):
    """
    Determines whether a profile can edit a tool.

    A profile can edit a tool if they're an admin or if the tool is theirs.

    Args:
        profile: Profile model object.
        tool: Tool model object.

    Returns:
        True if profile can edit the tool.
    """
    return profile.user.is_staff or profile == tool.owner

### WHETHER ACTIONS CAN BE TAKEN ####

def profile_can_delete_tool_listing(profile, tool):
    """
    Decides if a profile can take the action of deleting a tool from the
    shed.

    Conditions:
        Visible to Owner
        Visible to Admin
        Disabled if Tool is not available

    Args:
        profile: Profile of user who wants to take the action.
        tool: Tool.

    Returns:
        True if user can take the action.
    """
    if (tool.borrowing is not None and
            tool.borrowing.status == models.Borrowing.STATUS_IN_USE):
        return False
    # assuming that if the tool is requested, reserved, ready can be deleted

    if (tool.owner == profile):
        return True

    if (profile.user.is_staff):
        return True

    return False

def profile_can_request_to_borrow_tool(profile, tool):
    """
    Decides if a profile can take the action of borrowing a tool from the
    shed.

    Conditions:
        Visible to users in community except owner
        Disabled if Tool is not entirely available

    Args:
        profile: Profile of user who wants to take the action.
        tool: Tool.

    Returns:
        True if user can take the action.
    """
    if (tool.owner == profile):
        return False
    if (tool.borrowing is not None):
        return False
    if (tool.shed.community != profile.community):
        return False
    return True

def profile_can_cancel_borrow_request(profile, tool):
    """
    Decides if a profile can take the action of canceling a borrow request
    for a tool from a shed.

    Conditions:
        Visible to user requesting to borrow
        Visible only if tool borrowing's state is requested

    Args:
        profile: Profile of user who wants to take the action.
        tool: Tool.

    Returns:
        True if user can take the action.
    """
    if (tool.borrowing is None):
        return False
    if (tool.borrowing.status != models.Borrowing.STATUS_REQUESTED):
        return False
    if (tool.borrowing.borrower != profile):
        return False
    return True

def profile_can_check_in_to_shed(profile, tool):
    """
    Decides if a profile can take the action of checking a tool into a shed

    Conditions:
        Visible to shed coordinator
        Visible if tool is available, requested, reserved, or ready

    Args:
        profile: Profile of user who wants to take the action.
        tool: Tool.

    Returns:
        True if user can take the action.
    """
    if not shed_logic.is_shed_coordinator(profile, tool.shed):
        return False

    if (tool.borrowing is not None and
            tool.borrowing.status == models.Borrowing.STATUS_READY):
        return False
    return True

def profile_can_accept_borrow_request(profile, tool):
    """
    Decides if a profile can take the action of accepting or rejecting a
    tool borrow request.

    Conditions:
        Profile is tool owner.
        Tool borrowing state is requested.

    Args:
        profile: Profile of user who wants to take the action.
        tool: Tool.

    Returns:
        True if user can take the action.
    """
    if tool.owner != profile:
        return False

    if (not tool.borrowing or
            tool.borrowing.status != models.Borrowing.STATUS_REQUESTED):
        return False

    return True

def profile_can_check_out_from_shed(profile, tool):
    """
    Decides if a profile can take the action of checking a tool out from the
    shed.

    Conditions:
        Visible to Shed Coordinator.
        Enabled if tool is available, requested, reserved, or ready.
        Invisible if tool's location is not shed's location.

    Args:
        profile: Profile of user who wants to take the action.
        tool: Tool.

    Returns:
        True if user can take the action.
    """
    if not shed_logic.is_shed_coordinator(profile, tool.shed):
        return False

    if tool.location != tool.shed.location:
        return False

    if (tool.borrowing is not None and
            tool.borrowing.status == models.Borrowing.STATUS_IN_USE):
        return False

    return True

def profile_in_my_possession(profile, tool):
    """
    Decides if someone owns a tool

    Conditions:
        Visible to tool owner

    Args:
        profile: Profile of user who wants to take the action.
        tool: Tool.

    Returns:
        True if user can take the action.
    """
    return tool.owner == profile
